// The text to identify rules for each possible step that can be taken

const NO_CHANGE = 'NO_CHANGE';

const BASIC_FUNCTIONS = {
  // e.g. x * 0 -> 0
  MULTIPLY_BY_ZERO: 'MULTIPLY_BY_ZERO',
  // e.g. 0 * x -> 0
  MULTIPLY_BY_ZERO_REVERSE: 'MULTIPLY_BY_ZERO',
  // e.g. 0/1 -> 0
  REDUCE_ZERO_NUMERATOR: 'REDUCE_ZERO_NUMERATOR',
  // e.g. x * 2 -> 2x
  //REARRANGE_COEFF: 'REARRANGE_COEFF',
  // e.g. x ^ 0 -> 1
  REDUCE_EXPONENT_BY_ZERO: 'REDUCE_EXPONENT_BY_ZERO',
  // e.g. x ^ 1 -> x
  REMOVE_EXPONENT_BY_ONE: 'REMOVE_EXPONENT_BY_ONE',
  // e.g. 1 ^ x -> 1
  REMOVE_EXPONENT_BASE_ONE: 'REMOVE_EXPONENT_BASE_ONE',
  // e.g --2 -> 2
  NEGATION: 'NEGATION',
  // e.g. 2 + 0 -> 2
  REMOVE_ADDING_ZERO: 'REMOVE_ADDING_ZERO',
  // e.g. 0 + 2 -> 2
  REMOVE_ADDING_ZERO_REVERSE: 'REMOVE_ADDING_ZERO_REVERSE',
  // e.g. x * -1 -> -x
  REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: 'REMOVE_MULTIPLYING_BY_NEGATIVE_ONE',
  // e.g. -1 * x -> -x
  REMOVE_MULTIPLYING_BY_NEGATIVE_ONE_REVERSE: 'REMOVE_MULTIPLYING_BY_NEGATIVE_ONE_REVERSE',
  // e.g. x * 1 -> x
  REMOVE_MULTIPLYING_BY_ONE: 'REMOVE_MULTIPLYING_BY_ONE',
  // e.g. 1 * x -> x
  REMOVE_MULTIPLYING_BY_ONE_REVERSE: 'REMOVE_MULTIPLYING_BY_NEGATIVE_ONE_REVERSE',
  // e.g. 2/-1 -> -2
  DIVISION_BY_NEGATIVE_ONE: 'DIVISION_BY_NEGATIVE_ONE',
  // e.g. 2/1 -> 2
  DIVISION_BY_ONE: 'DIVISION_BY_ONE',
  // e.g. 2 - - 3 -> 2 + 3
  RESOLVE_DOUBLE_MINUS: 'RESOLVE_DOUBLE_MINUS'
}

const DIVISION_FUNCTIONS = {
  // DIVISION

  // e.g. 2/3/4 -> 2/(3*4)
  SIMPLIFY_DIVISION: 'SIMPLIFY_DIVISION',
  // e.g. x/(2/3) -> x * 3/2
  MULTIPLY_BY_INVERSE: 'MULTIPLY_BY_INVERSE'
}


const FRACTION_FUNCTIONS = {
  // e.g. -2/-3 => 2/3
  CANCEL_MINUSES: 'CANCEL_MINUSES',
  // e.g. 2x/2 -> x
  //CANCEL_TERMS: 'CANCEL_TERMS',
  // e.g. 2/6 -> 1/3
  //SIMPLIFY_FRACTION: 'SIMPLIFY_FRACTION',
  // e.g. 2/-3 -> -2/3
  SIMPLIFY_SIGNS: 'SIMPLIFY_SIGNS',
  COMBINE_NUMERATORS: 'COMBINE_NUMERATORS',
  COMMON_DENOMINATOR: 'COMMON_DENOMINATOR',
  //MULTIPLY_DENOMINATORS: 'MULTIPLY_DENOMINATORS',
  // ADDING FRACTIONS
  /*
  // e.g. 1/2 + 1/3 -> 5/6
  ADD_FRACTIONS: 'ADD_FRACTIONS',
  // e.g. (1 + 2)/3 -> 3/3
  ADD_NUMERATORS: 'ADD_NUMERATORS',
  // e.g. (2+1)/5
  COMBINE_NUMERATORS: 'COMBINE_NUMERATORS',
  // e.g. 2/6 + 1/4 -> (2*2)/(6*2) + (1*3)/(4*3)
  COMMON_DENOMINATOR: 'COMMON_DENOMINATOR',
  // e.g. 3 + 1/2 -> 6/2 + 1/2 (for addition)
  CONVERT_INTEGER_TO_FRACTION: 'CONVERT_INTEGER_TO_FRACTION',
  // e.g. 1.2 + 1/2 -> 1.2 + 0.5
  DIVIDE_FRACTION_FOR_ADDITION: 'DIVIDE_FRACTION_FOR_ADDITION',
  // e.g. (2*2)/(6*2) + (1*3)/(4*3) -> (2*2)/12 + (1*3)/12
  MULTIPLY_DENOMINATORS: 'MULTIPLY_DENOMINATORS',
  // e.g. (2*2)/12 + (1*3)/12 -> 4/12 + 3/12
  MULTIPLY_NUMERATORS: 'MULTIPLY_NUMERATORS'
  */
}

const COLLECT_AND_COMBINE_FUNCTIONS = {
  // COLLECT AND COMBINE

  // e.g. x + 2 + x^2 + x + 4 -> x^2 + (x + x) + (4 + 2)
  //COLLECT_LIKE_TERMS: 'COLLECT_LIKE_TERMS',

  // ADDING POLYNOMIALS

  // e.g. 2x + x -> 2x + 1x
  //ADD_COEFFICIENT_OF_ONE: 'ADD_COEFFICIENT_OF_ONE',
  // e.g. x^2 + x^2 -> 2x^2
  //ADD_POLYNOMIAL_TERMS: 'ADD_POLYNOMIAL_TERMS',
  // e.g. 2x^2 + 3x^2 + 5x^2 -> (2+3+5)x^2
  //GROUP_COEFFICIENTS: 'GROUP_COEFFICIENTS',
  // e.g. -x + 2x => -1*x + 2x
  //UNARY_MINUS_TO_NEGATIVE_ONE: 'UNARY_MINUS_TO_NEGATIVE_ONE',

  // MULTIPLYING POLYNOMIALS

  // e.g. x^2 * x -> x^2 * x^1
  //ADD_EXPONENT_OF_ONE: 'ADD_EXPONENT_OF_ONE',
  // e.g. x^2 * x^3 * x^1 -> x^(2 + 3 + 1)
  PRODUCT_RULE: 'PRODUCT_RULE',
  QUOTIENT_RULE: 'QUOTIENT_RULE',
  // e.g. 2x * 3x -> (2 * 3)(x * x)
  //MULTIPLY_COEFFICIENTS: 'MULTIPLY_COEFFICIENTS',
  // e.g. 2x * x -> 2x ^ 2
  //MULTIPLY_POLYNOMIAL_TERMS: 'MULTIPLY_POLYNOMIAL_TERMS'
}

const ARITHMETIC_FUNCTIONS = {
  // ARITHMETIC

  // e.g. 2 + 2 -> 4 or 2 * 2 -> 4
  EVALUATE_ADDITION: 'EVALUATE_ADDITION',
  EVALUATE_MULTIPLICATION: 'EVALUATE_MULTIPLICATION',
}

const BREAK_UP_NUMERATOR_FUNCTIONS = {
  // FRACTIONS

  // e.g. (x + 2)/2 -> x/2 + 2/2
  BREAK_UP_FRACTION: 'BREAK_UP_FRACTION'
}

const MULTIPLY_FRACTIONS_FUNCTIONS = {
  // MULTIPLYING FRACTIONS

  // e.g. 1/2 * 2/3 -> 2/6
  MULTIPLY_FRACTIONS: 'MULTIPLY_FRACTIONS'
}

const DISTRIBUTE_FUNCTIONS = {
  // DISTRIBUTION

  // e.g. 2(x + y) -> 2x + 2y
  DISTRIBUTE: 'DISTRIBUTE',
  DISTRIBUTE_RIGHT: 'DISTRIBUTE_RIGHT',
  // e.g. -(2 + x) -> -2 - x
  DISTRIBUTE_NEGATIVE_ONE: 'DISTRIBUTE_NEGATIVE_ONE',
  // e.g. 2 * 4x + 2*5 --> 8x + 10 (as part of distribution)
  //SIMPLIFY_TERMS: 'SIMPLIFY_TERMS'
}

const FUNCTIONS_FUNCTIONS = {
  // GROUP_TERMS_BY_ROOT: 'GROUP_TERMS_BY_ROOT',
   // COMBINE_UNDER_ROOT: 'COMBINE_UNDER_ROOT',
    DISTRIBUTE_NTH_ROOT: 'DISTRIBUTE_NTH_ROOT',
    EVALUATE_DISTRIBUTED_NTH_ROOT: 'EVALUATE_DISTRIBUTED_NTH_ROOT',
  CONVERT_MULTIPLICATION_TO_EXPONENT: 'CONVERT_MULTIPLICATION_TO_EXPONENT',

    //FACTOR_INTO_PRIMES: 'FACTOR_INTO_PRIMES',
  // ABSOLUTE
  // e.g. |-3| -> 3
  //ABSOLUTE_VALUE: 'ABSOLUTE_VALUE',
  //CANCEL_EXPONENT: 'CANCEL_EXPONENT',
  /*
  // ROOTS
  // e.g. nthRoot(x ^ 2, 4) -> nthRoot(x, 2)
  CANCEL_EXPONENT: 'CANCEL_EXPONENT',
  // e.g. nthRoot(2, 2) * nthRoot(3, 2) -> nthRoot(2 * 3, 2)
  // e.g. 2 * 2 * 2 -> 2 ^ 3
  CONVERT_MULTIPLICATION_TO_EXPONENT: 'CONVERT_MULTIPLICATION_TO_EXPONENT',
  // e.g. nthRoot(2 * x) -> nthRoot(2) * nthRoot(x)
  DISTRIBUTE_NTH_ROOT: 'DISTRIBUTE_NTH_ROOT',
  // e.g. nthRoot(4) * nthRoot(x^2) -> 2 * x
  EVALUATE_DISTRIBUTED_NTH_ROOT: 'EVALUATE_DISTRIBUTED_NTH_ROOT',
  // e.g. 12 -> 2 * 2 * 3
  FACTOR_INTO_PRIMES: 'FACTOR_INTO_PRIMES',
  // e.g. nthRoot(2 * 2 * 2, 2) -> nthRoot((2 * 2) * 2)
  GROUP_TERMS_BY_ROOT: 'GROUP_TERMS_BY_ROOT',
  // e.g. nthRoot(4) -> 2
  NTH_ROOT_VALUE: 'NTH_ROOT_VALUE'
  */
}

module.exports = {
    NO_CHANGE,
    BASIC_FUNCTIONS,
    DIVISION_FUNCTIONS,
    FRACTION_FUNCTIONS,
    COLLECT_AND_COMBINE_FUNCTIONS,
    ARITHMETIC_FUNCTIONS,
    BREAK_UP_NUMERATOR_FUNCTIONS,
    MULTIPLY_FRACTIONS_FUNCTIONS,
    DISTRIBUTE_FUNCTIONS,
    FUNCTIONS_FUNCTIONS
}
